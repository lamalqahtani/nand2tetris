// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInstruction); //true if the instruction is A-Instruction
    Or(a=isAInstruction, b=instruction[5], out =loadAReg); 
    And(a=instruction[15], b=instruction[4], out=loadDReg); //if the instruction is C-Instruction and the second d flag is true then load register D.

    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);
    Mux16(a=AReg, b=inM, sel=instruction[12], out=outMux2); 

    //Registers
    ARegister(in=outMux1 ,load=loadAReg ,out=AReg, out[0..14]=addressM);
    DRegister(in=outALU ,load=loadDReg ,out=DReg);
    
    //ALU
    ALU(x=DReg ,y=outMux2 ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out= outM, out=outALU ,zr=zr ,ng=ng); //DReg (found)


    //PC
        Not(in=ng, out=notNG); 
    Not(in=zr, out=notZR);
    And(a=notNG, b=notZR, out = ps); //if true, then the ALU output is positive 
    And(a=instruction[0] ,b=ps ,out=load0); 
    And(a=instruction[1] ,b=zr ,out=load1); 
    And(a=instruction[2] ,b=ng ,out=load2); 
    Or(a=load0 ,b=load1 ,out=loadA );
    Or(a=loadA ,b=load2 ,out=loadB );

    And(a=instruction[15], b=loadB, out=jump); //jump if the instruction is C-Instruction and the jump condition is met.
    PC(in=AReg ,load=jump ,inc=true ,reset=reset ,out[0..14]=pc); 

}